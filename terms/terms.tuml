package terms;

apply kirra;
import mdd_types;

datatype NoRelatedTermFound
end;

datatype NoDefinitionFound
end;

class Term
    attribute name : String;
    attribute definition : Memo[0,1];

    operation researchRelatedTerms();
    begin
        var retrieved : RetrievedTerm;
        begin
            retrieved := self.definer.define(self.name);
            if (retrieved.related.isEmpty()) then
                raise new NoRelatedTermFound;
            retrieved.related.forEach((r : RetrievedTerm) {
                self.addRelatedTerm(r);
            });
        end;
    end;
    
    operation researchDefinition();
    begin
        var retrieved : RetrievedTerm;
        begin
            retrieved := self.definer.define(self.name);
            if (retrieved.definition == null) then
                raise new NoDefinitionFound;
            self.definition := retrieved.definition;
        end;
    end;

    private operation addRelatedTerm(r : RetrievedTerm);
    begin
        var newTerm : Term;
        begin
            begin
	            newTerm := new Term;
	            newTerm.name := r.term;
	            newTerm.definition := r.definition;
	        end;
	        begin
                link TermRelationship(term := self, relatedTerms := newTerm);
            end;
        end;
    end;
    
    required port definer : Definer;
end;

association TermRelationship
    role term : Term;
    navigable role relatedTerms : Term[*];
end;


interface Definer
    operation define(term : String) : RetrievedTerm;
end;

datatype RetrievedTerm
    attribute term : String;
    attribute definition : Memo[0,1];
    attribute related : RetrievedTerm[*];
end;


external class DefinitionService implements Definer
end;

component TermsApp

    composition terms : Term[*];

    composition definitionService : DefinitionService;

    provided port definer : Definer connector terms.definer, definitionService;
end;

end.