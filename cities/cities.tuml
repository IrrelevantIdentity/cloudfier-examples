package cities;

class City
    attribute name : String;
    attribute population : Integer;
    attribute \state : State;
end;

datatype StatePopulation
    attribute stateAcronym : String;
    attribute population : Integer;
end;

class State
    attribute name : String;
    attribute acronym : String;
    attribute cities : City[*];
    derived attribute population  : Integer := { 
        self.cities.sumInteger((c : City) : Integer { c.population })
    };
    
    static query populousStates(threshold : Integer) : String[*];
    begin
        return (City extent
            .groupBy((c : City) : State { c.\state }) as mdd_collections::Grouping<City>)
            .collect((citiesByState : City[*]) : StatePopulation {
            	({
            	    stateAcronym := citiesByState.one().\state.acronym,
            	    population := citiesByState.sumInteger((c : City) : Integer { c.population })
            	} as StatePopulation)
            })
            .select((sp : StatePopulation) : Boolean { sp.population > threshold })
            .collect((sp : StatePopulation) : String { sp.stateAcronym });
    end;
end;

aggregation CityStates 
    role City.\state;
    role State.cities; 
end;

end.
