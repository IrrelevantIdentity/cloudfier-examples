package cities;

class City
    attribute name : String;
    attribute population : Integer;
    attribute \state : State;
end;

datatype StatePopulation
    attribute stateAcronym : String;
    attribute statePopulation : Integer;
end;

class State
    attribute name : String;
    attribute acronym : String;
    attribute cities : City[*];
    derived attribute population  : Integer := { 
        (self.cities.sum((c : City) : Integer { c.population }) as Integer)
    };
    
    static query statesMorePopulousThan(threshold : Integer) : State[*];
    begin
        return City extent
            .groupBy((c : City) : State { c.\state })
            .groupCollect((cities : City[*]) : {:State, :Integer} {
            	{
            		\state := cities.one().\state, 
            		statePopulation := cities.sum((c : City) : Integer { c.population } ) 
        		}
        	})
            .select((aggregated : {:State, statePopulation:Integer}) : Boolean {
            	aggregated.statePopulation > threshold 
        	})
        	.collect((stats : {\state : State, : Integer}) : State { stats.\state });
	end;
    
    static query acronymsOfStatesMorePopulousThan(threshold : Integer) : String[*];
    begin
        return State#statesMorePopulousThan(threshold).collect((s : State) : String { s.acronym });
        /*
            db.City.aggregate({
              	$group : {
                    _id : "$state",
                    statePopulation : { $sum : "$population" } 
                }
            }, {
            	$match : {
            		statePopulation : {
            			$gte : threshold 
        			} 
    			} 
			})
		*/
    end;
end;

aggregation CityStates 
    role City.\state;
    role State.cities; 
end;

end.
