package cities;

class City

    attribute name : String;

    attribute population : Integer;

    attribute cityState : State;
end;

datatype StatePopulation

    attribute abbreviation : String;

    attribute population : Integer;
end;

class State

    attribute name : String;

    attribute abbreviation : String;

    attribute cities : City[*];

    derived attribute population : Integer := {
        self.cities.sum((c : City) : Integer { c.population })
    };

    query city(name : String) : City[0, 1];
    begin
        return self.cities.\any((c : City) : Boolean { c.name = name });
    end;
    
    static query citiesByState() : { stateAcronym : String, cities : City[*] }[*];
    begin
        return City extent.groupBy((c : City) : State {
        	c.cityState
    	}).groupCollect((cities : City[*]) : { stateAcronym  : String, cities : City[*]} {
            {
                stateAcronym := cities.one().cityState.abbreviation, 
                cities := cities
            }
        });
    end;

    static query byAbbreviation(abbreviation : String) : State[0, 1];
    begin
        return State extent.\any((s : State) : Boolean {
            s.abbreviation = abbreviation
        });
    end;

    static query statesMorePopulousThan(threshold : Integer) : State[*];
    begin
        return City extent.groupBy((c : City) : State {
        	c.cityState
    	}).groupCollect((cities : City[*]) : { : State,  : Integer} {
            {
                cityState := cities.one().cityState, 
                statePopulation := cities.sum((c : City) : Integer {
                    c.population
                })
            }
        }).select((aggregated : { : State, statePopulation : Integer}) : Boolean {
            aggregated.statePopulation > threshold
        }).collect((stats : {cityState : State,  : Integer}) : State {
            stats.cityState
        });
        /*
          CriteriaQuery<City> q = cb.createQuery(City.class);
		  Root<City> c = q.from(City.class);
		  q.select(c.get("currency"), cb.sum(c.get("population")));
		  q.where(cb.isMember("Europe", c.get("continents")));
		  q.groupBy(c.get("currency"));
		  g.having(cb.gt(cb.count(c), 1));
         */
    end;

    static query abbreviationsOfStatesMorePopulousThan(threshold : Integer) : String[*];
    begin
        return State#statesMorePopulousThan(threshold).collect((s : State) : String {
            s.abbreviation
        });
    end;
    
    static query statePopulations() : StatePopulation[*];
    begin
        return State extent.collect((cityState : State) : StatePopulation {
            ({
                abbreviation := cityState.abbreviation, 
                population := cityState.population
            } as StatePopulation)
        });
    end;
end;

aggregation CityStates

    role City.cityState;

    role State.cities;

end;

end.