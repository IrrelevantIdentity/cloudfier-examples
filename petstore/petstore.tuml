/*
 * Based on the Java Pet Store (Copyright Sun Microsystems).
 *
 * See Example Applications in the documentation for more information:
 *
 * http://cloudfier.com/doc/
 */
package petstore;

apply kirra;

[kirra::User]
class Customer

    attribute name : String;

    attribute orders : Order[*];
end;

association

    role Customer.orders;

    navigable role customer : Customer;

end;

class Product

    attribute productName : String;

    attribute productPrice : Double[0, 1]
        (* Price must be greater than zero *)
        invariant { (self.productPrice > 0) };

    attribute unitCost : Double[0, 1]
        invariant { (self.unitCost > 0) };

    attribute productDescription : String[0, 1];

    attribute productWeight : Double[0, 1] := 0.0
        invariant { self.productWeight >= 0 };

    reference category : Category;
end;

class Category

    attribute name : String;
end;

class OrderDetail

    attribute order : Order;
    
    readonly reference product : Product[0, 1];

    attribute quantity : Integer := 1
        (* Quantity must be a positive number. *)
        invariant { self.quantity > 0 };

    derived attribute weight : Double := {
        self.product.productWeight * self.quantity
    };

    derived attribute price : Double := {
        self.unitPrice * self.quantity
    };
    
    derived attribute unitPrice : Double := { self.product.productPrice };
end;

class Order

    readonly attribute orderDate : Date := { Date#today() };

    attribute orderStatus : Status;

    readonly attribute items : OrderDetail[*];

    derived attribute orderWeightTotal : Double := {
        self.computeWeightTotal()
    };

    derived attribute orderTotal : Double := { self.computeOrderTotal() };

    operation addItem(product : Product, quantity : Integer)
    precondition { self.orderStatus == Status#New };
    begin
        var i : OrderDetail;
        i := new OrderDetail;
        i.product := product;
        i.quantity := quantity;
        i.order := self;
    end;

    operation complete();

    operation process()
        precondition { not self.items.isEmpty() };

    statemachine Status

        initial state New
            transition on call(process) to Processing;
            transition on call(process) to New;
        end;

        state Processing
            transition on call(complete) to Completed;
        end;

        terminate state Completed end;

    end;


    private query computeOrderTotal() : Double;
    begin
        return self.items.reduce((d : OrderDetail, base : Double) : Double {
            d.price + base
        }, 0);
    end;

    private query computeWeightTotal() : Double;
    begin
        return self.items.reduce((d : OrderDetail, base : Double) : Double {
            d.weight + base
        }, 0);
    end;
end;

composition

    role Order.items;

    role OrderDetail.order;

end;

end.