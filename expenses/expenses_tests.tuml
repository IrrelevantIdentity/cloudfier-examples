package expenses_tests;

import expenses;

[Test]
class Tests

    private static operation declareFor(amount : Double, employee : Employee) : Expense;
    begin
        var cat; 
        cat := Tests#category("Sample category");
        return employee.declareExpense("just a test expense", amount, Date#today(), cat);
    end;

    private static operation declare(amount : Double) : Expense;
    begin
        return Tests#declareFor(amount, Tests#employee("John Doe"));
    end;
    
    private static operation category(name : String) : Category;
    begin
        var cat;
        cat := new Category;
        cat.name := name;
        return cat;
    end;
    
    static operation employee(name : String) : Employee;
    begin
        var employee;
        employee := new Employee;
        employee.name := name;
        employee.username := name;        
        return employee;
    end;

    operation declaredExpenseRemainsInDraft();
    begin
        var expense : Expense;
        begin
            expense := Tests#declare(10.0);
        end;
        begin
            Assert#areEqual(Expense::Status#Draft, expense.status);
        end;
    end;

    operation automaticApproval();
    begin
        var employee;
        employee := Tests#employee("Jane Doe");
        Assert#isTrue(Tests#declareFor(49.9, employee).automaticApproval);
        Assert#isTrue(not Tests#declareFor(50.0, employee).automaticApproval);
    end;

    operation submitExpenseUnder50IsAutomaticallyApproved();
    begin
        var expense : Expense;
        begin
            expense := Tests#declare(10.0);
            Assert#isTrue(expense.automaticApproval);
        end;        
        begin
            expense.submit();
        end;
        begin
            Assert#areEqual(Expense::Status#Approved, expense.status);
        end;
    end;

    operation submitExpense50AndOverNeedsApproval();
    begin
        var expense : Expense;
        begin
            expense := Tests#declare(100.0);
            Assert#isTrue(not expense.automaticApproval);
        end;
        begin
            expense.submit();
        end;
        begin
            Assert#areEqual(Expense::Status#Submitted, expense.status);
        end;
    end;
    operation rejectedExpense();
    begin
        var expense : Expense;
        begin
            expense := Tests#declare(100.0);
        end;
        begin
            expense.submit();
        end;
        begin
            expense.reject(Memo#fromString("Non-reimbursable"));
        end;
        begin
            Assert#areEqual(Expense::Status#Rejected, expense.status);
        end;
    end;    

    operation expenseByCategoryTotals();
    begin
        var employee, cat1, cat2, cat3;
        begin
            employee := Tests#employee("Jane Doe");
            cat1 := Tests#category("category 1");
            cat2 := Tests#category("category 2");
            cat3 := Tests#category("category 3");            
        end; 
        begin        
            employee.declareExpense("expense 1", 100, Date#today(), cat1).submit();
            employee.declareExpense("expense 2", 300, Date#today(), cat1).submit();
            employee.declareExpense("expense 3", 750, Date#today(), cat2).submit();
        end;
        begin
            var stats, cat1Stats, cat2Stats;
            stats := Category#totalExpensesPerCategory();
            Assert#isTrue(stats.size() >= 2);
            
            cat1Stats := stats.\any(
            	(group : CategoryTotal) : Boolean {
            		group.category == cat1 
        		}
        	);
            Assert#isNotNull(cat1Stats);
            Assert#areEqual(400, cat1Stats.total);            
            
            cat2Stats := stats.\any(
            	(group : CategoryTotal) : Boolean {
            		group.category == cat2
        		}
        	);
            Assert#isNotNull(cat2Stats);
            Assert#areEqual(750, cat2Stats.total);            
        end;
    end;    
    
    operation approvedExpenseByCategoryTotals();
    begin
        var employee, cat1, cat2, cat3;
        begin
            employee := Tests#employee("Jane Doe");
            cat1 := Tests#category("category 1");
            cat2 := Tests#category("category 2");
            cat3 := Tests#category("category 3");            
        end; 
        begin        
            employee.declareExpense("expense 1", 100, Date#today(), cat1).submit();
            employee.declareExpense("expense 2", 300, Date#today(), cat1).submit();
            employee.declareExpense("expense 3", 750, Date#today(), cat2).submit();
            employee.declareExpense("expense 4", 5, Date#today(), cat2).submit();
            employee.declareExpense("expense 5", 7, Date#today(), cat2).submit();            
            employee.declareExpense("expense 6", 13, Date#today(), cat3).submit();                        
        end;
        begin
            var stats, cat2Stats, cat3Stats;
            stats := Category#totalApprovedExpensesPerCategory();
            Assert#isTrue(stats.size() >= 2);
            
            cat2Stats := stats.\any(
            	(group : CategoryTotal) : Boolean {
            		group.category == cat2 
        		}
        	);
            Assert#isNotNull(cat2Stats);
            Assert#areEqual(12, cat2Stats.total);            
            
            cat3Stats := stats.\any(
            	(group : CategoryTotal) : Boolean {
            		group.category == cat3
        		}
        	);
            Assert#isNotNull(cat3Stats);
            Assert#areEqual(13, cat3Stats.total);            
        end;
    end;    
    
    operation mostExpensedCategories();
    begin
        var employee, cat1, cat2, cat3;
        begin
            employee := Tests#employee("Jane Doe");
            cat1 := Tests#category("category 1");
            cat2 := Tests#category("category 2");
            cat3 := Tests#category("category 3");            
        end; 
        begin        
            employee.declareExpense("expense 1", 100, Date#today(), cat1).submit();
            employee.declareExpense("expense 2", 300, Date#today(), cat1).submit();
            employee.declareExpense("expense 3", 700, Date#today(), cat1).submit();
            employee.declareExpense("expense 5", 1500, Date#today(), cat2).submit();            
            employee.declareExpense("expense 6", 500, Date#today(), cat3).submit();                        
        end;
        begin
            var stats, cat1Stats, cat2Stats;
            stats := Category#mostExpensedCategories(1000.0);
            Assert#isTrue(stats.size() >= 2);
            
            cat1Stats := stats.\any(
            	(group : CategoryTotal) : Boolean {
            		group.category == cat1 
        		}
        	);
            Assert#isNotNull(cat1Stats);
            Assert#areEqual(1100, cat1Stats.total);            
            
            cat2Stats := stats.\any(
            	(group : CategoryTotal) : Boolean {
            		group.category == cat2
        		}
        	);
            Assert#isNotNull(cat2Stats);
            Assert#areEqual(1500, cat2Stats.total);            
        end;
    end;        
    
    operation expenseByCategoryCounts();
    begin
        var employee, cat1, cat2, cat3;
        begin
            employee := Tests#employee("Jane Doe");
            cat1 := Tests#category("category 1");
            cat2 := Tests#category("category 2");
            cat3 := Tests#category("category 2");            
        end; 
        begin        
            employee.declareExpense("expense 1", 100, Date#today(), cat1).submit();
            employee.declareExpense("expense 2", 100, Date#today(), cat1).submit();
            employee.declareExpense("expense 3", 100, Date#today(), cat2).submit();
        end;
        begin
            var stats, cat1Stats;
            stats := Expense#openExpenseCountPerCategory();
            Assert#isTrue(stats.size() >= 2);
            
            cat1Stats := stats.\any(
            	(group : {category : Category, count : Integer}) : Boolean {
            		group.category == cat1 
        		}
        	);
            Assert#isNotNull(cat1Stats);
            Assert#areEqual(2, cat1Stats.count);            
        end;
    end;        
    
    operation expenseByEmployeeCounts();
    begin
        var ceo, salesGuy, programmer;
        begin
            ceo := Tests#employee("The CEO");
            salesGuy := Tests#employee("A sales guy");            
            programmer := Tests#employee("A programmer that never expenses anything");                        
        end; 
        begin        
            Tests#declareFor(800, ceo);
            Tests#declareFor(1000, ceo);            
            Tests#declareFor(2000, ceo);                        
            Tests#declareFor(500, salesGuy);            
        end;
        begin
            var stats, ceoStats, salesGuyStats;
            stats := Expense#expenseCountPerEmployee();
            Assert#isTrue(stats.size() >= 2);
            
            ceoStats := stats.\any(
            	(group : {employee : Employee, expenseCount : Integer}) : Boolean {
            		group.employee == ceo
        		}
        	);
            salesGuyStats := stats.\any(
            	(group : {employee : Employee, expenseCount : Integer}) : Boolean {
            		group.employee == salesGuy
        		}
        	);        	
            Assert#isNotNull(ceoStats);
            Assert#areEqual(3, ceoStats.expenseCount);            
            Assert#isNotNull(salesGuyStats);
            Assert#areEqual(1, salesGuyStats.expenseCount);            
        end;
    end;        
    
    operation expenseDetails();
    begin
        var ceo, salesGuy,
        	cat1, cat2, cat3;
        begin
            cat1 := Tests#category("category 1");
            cat2 := Tests#category("category 2");
            cat3 := Tests#category("category 2");            
            ceo := Tests#employee("The CEO");
            salesGuy := Tests#employee("A sales guy");            
        end; 
        begin        
            ceo.declareExpense("expense 1", 100, Date#today(), cat1);
            salesGuy.declareExpense("expense 2", 200, Date#today(), cat2);
        end;
        begin
            var details, ceoDetails, salesGuyDetails;
            details := Expense#expenseDetails();
            Assert#isTrue(details.size() >= 2);
             
            ceoDetails := details.\any(
            	(it : {reporter : Employee, category : String, expenseAmount : Double}) : Boolean {
            		it.reporter == ceo
        		}
        	);
            salesGuyDetails := details.\any(
            	(it : {reporter : Employee, category : String, expenseAmount : Double}) : Boolean {
            		it.reporter == salesGuy
        		}
        	);        	
            Assert#isNotNull(ceoDetails);
            Assert#areEqual(100, ceoDetails.expenseAmount);            
            Assert#areEqual(cat1.name, ceoDetails.category);               
            Assert#isNotNull(salesGuyDetails);
            Assert#areEqual(200, salesGuyDetails.expenseAmount);             
            Assert#areEqual(cat2.name, salesGuyDetails.category);                           
        end;
    end;        

end;

end.