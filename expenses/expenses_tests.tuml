package expenses_tests;

import expenses;

[Test]
class Tests

    private static operation declareFor(amount : Double, employee : Employee) : Expense;
    begin
        var cat; 
        cat := Tests#category("Sample category");
        return employee.declareExpense("just a test expense", amount, Date#today(), cat);
    end;

    private static operation declare(amount : Double) : Expense;
    begin
        return Tests#declareFor(amount, Tests#employee("John Doe"));
    end;
    
    private static operation category(name : String) : Category;
    begin
        var cat;
        cat := new Category;
        cat.name := name;
        return cat;
    end;
    
    static operation employee(name : String) : Employee;
    begin
        var employee;
        employee := new Employee;
        employee.name := name;
        employee.username := name;        
        return employee;
    end;

    operation declaredExpenseRemainsInDraft();
    begin
        var expense : Expense;
        begin
            expense := Tests#declare(10.0);
        end;
        begin
            Assert#areEqual(Expense::Status#Draft, expense.status);
        end;
    end;

    operation automaticApproval();
    begin
        var employee;
        employee := Tests#employee("Jane Doe");
        Assert#isTrue(Tests#declareFor(49.9, employee).automaticApproval);
        Assert#isTrue(not Tests#declareFor(50.0, employee).automaticApproval);
    end;

    operation submitExpenseUnder50IsAutomaticallyApproved();
    begin
        var expense : Expense;
        begin
            expense := Tests#declare(10.0);
            Assert#isTrue(expense.automaticApproval);
        end;        
        begin
            expense.submit();
        end;
        begin
            Assert#areEqual(Expense::Status#Approved, expense.status);
        end;
    end;

    operation submitExpense50AndOverNeedsApproval();
    begin
        var expense : Expense;
        begin
            expense := Tests#declare(100.0);
            Assert#isTrue(not expense.automaticApproval);
        end;
        begin
            expense.submit();
        end;
        begin
            Assert#areEqual(Expense::Status#Submitted, expense.status);
        end;
    end;
    operation rejectedExpense();
    begin
        var expense : Expense;
        begin
            expense := Tests#declare(100.0);
        end;
        begin
            expense.submit();
        end;
        begin
            expense.reject(Memo#fromString("Non-reimbursable"));
        end;
        begin
            Assert#areEqual(Expense::Status#Rejected, expense.status);
        end;
    end;    
end;

end.