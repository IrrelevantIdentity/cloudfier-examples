package expenses_tests;

import expenses;

[Test]
class Tests

    static operation declare(amount : Double) : Expense;
    begin
        var emp : Employee, cat : Category, expense : Expense;
        emp := Employee extent.asSequence().head();
        cat := Category extent.asSequence().head();
        return emp.declareExpense("just a test expense", amount, Date#today(), cat);
    end;

    operation declaredExpenseRemainsInDraft();
    begin
        var expense : Expense;
        begin
            expense := Tests#declare(10.0);
        end;
        begin
            Assert#areEqual(Expense::Status#Draft, expense.status);
        end;
    end;

    operation automaticApproval();
    begin
        Assert#isTrue(Tests#declare(49.9).automaticApproval);
        Assert#isTrue(not Tests#declare(50.0).automaticApproval);
    end;

    operation submitExpenseUnder50IsAutomaticallyApproved();
    begin
        var expense : Expense;
        begin
            expense := Tests#declare(10.0);
            Assert#isTrue(expense.automaticApproval);
        end;        
        begin
            expense.submit();
        end;
        begin
            Assert#areEqual(Expense::Status#Approved, expense.status);
        end;
    end;

    operation submitExpense50AndOverNeedsApproval();
    begin
        var expense : Expense;
        begin
            expense := Tests#declare(100.0);
            Assert#isTrue(not expense.automaticApproval);
        end;
        begin
            expense.submit();
        end;
        begin
            Assert#areEqual(Expense::Status#Submitted, expense.status);
        end;
    end;
    operation rejectedExpense();
    begin
        var expense : Expense;
        begin
            expense := Tests#declare(100.0);
        end;
        begin
            expense.submit();
        end;
        begin
            expense.reject(Memo#fromString("Non-reimbursable"));
        end;
        begin
            Assert#areEqual(Expense::Status#Rejected, expense.status);
        end;
    end;    
end;

end.