package carserv_tests;

apply mdd_extensions;
import mdd_types;

import carserv::Model;
import carserv::Service;
import carserv;

[Test]
class MechanicScenarios

    operation startsInTraining();
    begin
        var mechanic;
        begin
	        mechanic := TestData#newMechanic();        
            Assert#isTrue(mechanic.training);
        end;
    end;

    operation goesOnVacation();
    begin
        var mechanic;
        begin
            mechanic := TestData#getAMechanic();
            Assert#isTrue(mechanic.working);
            mechanic.beginVacation();
        end;
        begin
            Assert#isTrue(! mechanic.working);
        end;
        begin
            mechanic.endVacation();
        end;
        begin
            Assert#isTrue(mechanic.working);
        end;
    end;

    operation workCompleted();
    begin
        var mechanic, service;
        begin
            mechanic := TestData#getAMechanicWithWorkScheduled();
            service := mechanic.upcomingServices.one();
            Assert#isTrue(mechanic.workScheduled);
            Assert#isTrue(! mechanic.workInProgress);
            service.start();
        end;
        begin
            Assert#isTrue(!mechanic.workScheduled);
            Assert#isTrue(mechanic.workInProgress);
            service.complete();
        end;
        begin
            Assert#isTrue(! mechanic.workInProgress);
            Assert#isTrue(!mechanic.workScheduled);
        end;
    end;

    [Failure(constraint="NoWorkInProgress")]
    operation cannotGoOnVacationIfWorkInProgress();
    begin
        var mechanic, service;
        begin
            mechanic := TestData#getAMechanicWithWorkScheduled();
            service := mechanic.upcomingServices.one();
            service.start();
        end;
        begin
            mechanic.beginVacation();
        end;
    end;

    [Failure(constraint="MustBeOnVacation")]
    operation cannotEndVacationIfAlreadyWorking();
    begin
        var mechanic;
        begin
            mechanic := TestData#getAMechanic();
            mechanic.endVacation();
        end;
    end;

    operation retires();
    begin
        var mechanic;
        begin
            mechanic := TestData#getAMechanicWithWorkScheduled();
            Assert#isTrue(mechanic.workScheduled);
            Assert#isTrue(! mechanic.workInProgress);
            mechanic.retire();
        end;
        begin
            Assert#isTrue(! mechanic.workScheduled);
        end;
    end;
end;

class TestData

    static operation getAMechanic() : AutoMechanic;
    begin
        var mechanic;
        begin
	        mechanic := TestData#newMechanic();
	        mechanic.completeTraining();
        end;
        begin
            Assert#areEqual(AutoMechanic::WorkingStatus#Working, mechanic.status);
            return mechanic;
        end;        
    end;

    static operation getAMechanicWithWorkScheduled() : AutoMechanic;
    begin
        var mechanic, service, car;
        mechanic := TestData#getAMechanic();
        car := TestData#newCar(TestData#newCustomer());
        service := Service#newService(car, Memo#fromString("A service"), 1);
        service.assignTo(mechanic);
        return mechanic;
    end;

    static operation newMechanic() : AutoMechanic;
    begin
        var mechanic;
        mechanic := new AutoMechanic;
        mechanic.firstName := "John";
        mechanic.lastName := "Fixalot";
        return mechanic;
    end;

    static operation newCustomer() : Customer;
    begin
        var customer;
        customer := new Customer;
        customer.firstName := "James";
        customer.lastName := "Rider";
        customer.title := Title#Mr;
        return customer;
    end;

    static operation newCar(customer : Customer) : Car;
    begin
        var car;
        car := new Car;
        car.registrationNumber := "1234567890";
        car.\model := TestData#newModel();
        car.owner := customer;
        return car;
    end;

    static operation newModel() : Model;
    begin
        var carModel;
        carModel := new Model;
        carModel.name := "A Model";
        carModel.make := TestData#newMake();
        return carModel;
    end;

    static operation newMake() : Make;
    begin
        var make;
        make := new Make;
        make.name := "A Make";
        return make;
    end;
end;

end.