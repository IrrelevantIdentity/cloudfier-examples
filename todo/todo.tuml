package todo;

apply kirra;
import mdd_types;

role class User

    readonly id attribute email : String;

    attribute name : String;
    
    attribute tasks : Task[*];

    derived attribute openTasks : Task[*] := {
        self.tasks.select((t : Task) : Boolean {
            t.status == Task::Status#Open
        })
    };
    
    private static derived attribute me : User := { (System#user() as User) };
end;

class Task

    private readonly attribute creator : User := { (System#user() as User) };

    attribute assignee : User[0, 1] := { (System#user() as User) };

    attribute description : String;

    attribute details : Memo;

    attribute status : Status;

    readonly attribute openedOn : Date := { Date#today() };

    readonly attribute completedOn : Date[0,1];

    operation complete();

    operation cancel();

    static query open() : Task[*];
    begin
        return Task extent.select((t : Task) : Boolean {
            t.status == Status#Open
        });
    end;
    
    static query mine() : Task[*];
    begin
        return User#me.tasks;
    end;
    
    static query mineOpen() : Task[*];
    begin
        return User#me.tasks.select((t : Task) : Boolean {
            t.status == Status#Open
        });
    end;
    
    static query openedToday() : Task[*];
    begin
        return Task#openedOn(Date#today());
    end;
    
    static query openedOn(date : Date) : Task[*];
    begin
        return Task extent.select((t : Task) : Boolean {
            t.openedOn = date
        });
    end;
    
    static query completedToday() : Task[*];
    begin
        return Task extent.select((t : Task) : Boolean {
            t.status == Status#Completed and (t.completedOn = Date#today())
        });
    end;

    statemachine Status

        initial state Open
            transition on call(complete) to Completed;
            transition on call(cancel) to Cancelled;
        end;

        state Completed
            entry {
                self.completedOn := Date#now();
            };
        end;

        terminate state Cancelled end;

    end;

end;

class Comment
    attribute text : Memo;
    readonly attribute author : User := { (System#user() as User) };
end;

composition

    navigable role comments : Comment[*];

    navigable role task : Task;

end;

association
    role User.tasks;
    role Task.assignee;
end;

end.
