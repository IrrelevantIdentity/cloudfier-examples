package todo;

[kirra::User]
class User

    readonly id attribute email : String;

    attribute name : String;
    
    attribute todos : Todo[*];

    derived attribute openTodos : Todo[*] := {
    	self.todos.select((t : Todo) : Boolean {
        	t.status == Todo::Status#Open
    	})
	};
    
    private static derived attribute me : User := { (System#user() as User) };
end;

class Todo

    private readonly attribute creator : User := { (System#user() as User) };

    attribute assignee : User[0, 1] := { (System#user() as User) };

    attribute description : String;

    attribute details : Memo;

    attribute status : Status;

    readonly attribute openedOn : Date := { Date#today() };

    readonly attribute completedOn : Date;

    operation complete();

    operation cancel();

    static query open() : Todo[*];
    begin
    	return Todo extent.select((t : Todo) : Boolean {
        	t.status == Status#Open
    	});
    end;
    
    static query mine() : Todo[*];
    begin
        return User#me.todos;
    end;
    
    static query mineOpen() : Todo[*];
    begin
        return User#me.todos.select((t : Todo) : Boolean {
        	t.status == Status#Open
    	});
    end;
    
    static query openedToday() : Todo[*];
    begin
        return Todo extent.select((t : Todo) : Boolean {
        	t.openedOn.differenceInDays(Date#today()) <= 0
    	});
    end;
    
    static query completedToday() : Todo[*];
    begin
        return Todo extent.select((t : Todo) : Boolean {
        	t.status == Status#Completed and (t.completedOn.differenceInDays(Date#today()) <= 0)
    	});
    end;

    statemachine Status

        initial state Open
            transition on call(complete) to Completed;
            transition on call(cancel) to Cancelled;
        end;

        state Completed
            entry {
                self.completedOn := Date#now();
            };
        end;

        terminate state Cancelled end;

    end;

end;

class Comment
    attribute text : Memo;
    readonly attribute author : User := { (System#user() as User) };
end;

composition

    navigable role comments : Comment[*];

    navigable role todo : Todo;

end;

association
    role User.todos;
    role Todo.assignee;
end;

end.
