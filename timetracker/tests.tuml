package tests;

import timetracker;

[Test]
class TaskScenarios

    /* Units of time reported increases as work is reported. */
    operation timeReported();
    begin
        var task;
        task := Examples#task();
        task.addWork(4);
        task.addWork(3);
        Assert#areEqual(2, task.reported.size());
        Assert#areEqual(7, task.unitsReported);
    end;

    /* Units of time to invoice decrease as work gets assigned to invoices. */
    operation timeToInvoice();
    begin
        var task, invoice, work1, work2;
        task := Examples#task();
        work1 := task.addWork(4);
        work2 := task.addWork(3);
        invoice := task.client.startInvoice();
        work1.submit(invoice);
        Assert#areEqual(1, task.toInvoice.size());
        Assert#areEqual(3, task.unitsToInvoice);
    end;
end;

[Test] 
class WorkScenarios

    operation workDateDefaultsToToday();
    begin
        var work;
        work := Examples#task().addWork(1); 
        Assert#areEqual(Date#today(), work.date);
    end;

    /* It is an error to assign work to an invoice that belongs to a different client. */
    [Failure(constraint="WrongClient", context="submit")]
    operation wrongClient();
    begin
        var client1, client2, work;
        client1 := Examples#client();
        client2 := Examples#client();
        work := client1.newTask("Some task").addWork(1);
        work.submit(client2.startInvoice());
    end;

    /* Cannot submit to an invoice work that was already submitted. */
    [Failure(constraint="AlreadyInvoiced", context="submit")]
    operation alreadyInvoiced();
    begin
        var invoice, work;
        work := Examples#client().newTask("Some task").addWork(1);
        invoice := work.client.startInvoice();
        work.submit(invoice);
        work.submit(invoice);
    end;

    [Failure(constraint="MustBePositive", context="units")]
    operation unitsWorkedMustBePositive();
    begin
        Examples#task().addWork(- 1);
    end;

    [Failure(constraint="MustBePositive", context="units")]
    operation unitsWorkedMayNotBeZero();
    begin
        Examples#task().addWork(0);
    end;
end;

[Test]
class InvoiceScenarios

    operation issueInvoice();
    begin
        var invoice, work, client;
        begin
            client := Examples#client();
            work := client.newTask("Some task").addWork(1);
            invoice := client.startInvoice();
            work.submit(invoice);
            Assert#areEqual(Invoice::Status#Preparation, invoice.status);
            invoice.issue();
        end;
        begin
            Assert#areEqual(Invoice::Status#Invoiced, invoice.status);
        end;
    end;
    
    operation invoicePaid();
    begin
        var invoice;
        begin
            invoice := Examples#client().startInvoice();
            invoice.client.newTask("Some task").addWork(1).submit(invoice);
            invoice.issue();
            send InvoicePaid() to invoice;
        end;
        begin
            Assert#areEqual(Invoice::Status#Received, invoice.status);
        end;
    end;


    [Failure(constraint="InvoiceNotOpen", context="submit")]
    operation cannotSubmitWorkIfInvoiceNotOpen();
    begin
        var task, invoice, work;
        begin
            task := Examples#task();
            invoice := task.client.startInvoice();
            task.addWork(1).submit(invoice);
            invoice.issue();
        end;
        begin
            task.addWork(2).submit(invoice);
        end;
    end;

    [Failure(constraint="MustHaveWork", context="issue")]
    operation cannotIssueInvoiceWithoutAnyWork();
    begin
        Examples#client().startInvoice().issue();
    end;
end;

class Examples

    private static operation clientWithName(name : String) : Client;
    begin
        var client;
        client := new Client;
        client.name := name;
        return client;
    end;

    private static operation client() : Client;
    begin
        return Examples#clientWithName("New Client");
    end;

    private static operation taskWithName(description : String, client : Client) : Task;
    begin
        var task;
        task := new Task;
        task.description := description;
        task.client := client;
        return task;
    end;

    private static operation task() : Task;
    begin
        return Examples#taskWithName("New Task", Examples#client());
    end;
end;

end.