package timetracker_tests;

apply kirra;

import mdd_extensions;
import mdd_types;
import timetracker;

[Test]
class ProjectScenarios

    operation timeReported();
    begin
        var project;
        begin
            project := Examples#project();
        end;
        begin
            project.addEntry(4);
            project.addEntry(3);
        end;
        begin
            Assert#areEqual(7, project.unitsReported);
        end;
    end;

    operation itemsReported();
    begin
        var project;
        begin
            project := Examples#project();
            project.addEntry(4);
            project.addEntry(3);
        end;
        begin
            Assert#areEqual(2, project.reported.size());
            project.addEntry(5);
        end;
        begin
            Assert#areEqual(3, project.reported.size());
        end;
    end;

    operation timeToInvoice();
    begin
        var project, invoice, entry1, entry2;
        begin
            project := Examples#project();
            entry1 := project.addEntry(4);
            entry2 := project.addEntry(3);
            invoice := project.client.startInvoice();
            entry1.submit(invoice);
        end;
        begin
            Assert#areEqual(1, project.toInvoice.size());
            Assert#areEqual(3, project.unitsToInvoice);
        end;
    end;
end;

[Test]
class EntryScenarios

    operation entryDateDefaultsToToday();
    begin
        var anEntry;
        anEntry := Examples#project().addEntry(1);
        Assert#areEqual(Date#today(), anEntry.date);
    end;

    [Failure(constraint="WrongClient", context="submit")]
    operation cannotAssignEntryToInvoiceFromAnotherClient();
    begin
        var client1, client2, anEntry;
        client1 := Examples#client();
        client2 := Examples#client();
        anEntry := client1.newProject("Some project").addEntry(1);
        anEntry.submit(client2.startInvoice());
    end;

    [Failure(constraint="AlreadyInvoiced", context="submit")]
    operation cannotSubmitEntryToInvoiceAlreadyInvoiced();
    begin
        var invoice, anEntry;
        anEntry := Examples#client().newProject("Some project").addEntry(1);
        invoice := anEntry.client.startInvoice();
        anEntry.submit(invoice);
        anEntry.submit(invoice);
    end;

    [Failure(constraint="MustBePositive", context="units")]
    operation unitsEntryedMustBePositive();
    begin
        Examples#project().addEntry(- 1);
    end;

    [Failure(constraint="MustBePositive", context="units")]
    operation unitsEntryedMayNotBeZero();
    begin
        Examples#project().addEntry(0);
    end;
end;

[Test]
class InvoiceScenarios

    operation issueInvoice();
    begin
        var invoice, anEntry, client;
        begin
            client := Examples#client();
            anEntry := client.newProject("Some project").addEntry(1);
            invoice := client.startInvoice();
            anEntry.submit(invoice);
        end;
        begin
            Assert#areEqual(Invoice::Status#Preparation, invoice.status);
            invoice.issue();
        end;
        begin
            Assert#areEqual(Invoice::Status#Invoiced, invoice.status);
        end;
    end;

    operation issueCancelled();
    begin
        var invoice, client;
        begin
            client := Examples#client();
            invoice := client.startInvoice();
        end;
        begin
            Assert#areEqual(Invoice::Status#Preparation, invoice.status);        
            invoice.cancel();
        end;
        begin
            Assert#areEqual(Invoice::Status#Cancelled, invoice.status);
        end;
    end;

    operation totalUnits();
    begin
        var invoice, project1, project2, client;
        begin
            client := Examples#client();
            invoice := client.startInvoice();
            project1 := client.newProject("Project 1");
            project2 := client.newProject("Project 2");
            project1.addEntry(1).submit(invoice);
            project1.addEntry(3).submit(invoice);
            project2.addEntry(7).submit(invoice);
        end;
        begin
            Assert#areEqual(11, invoice.totalUnits);
        end;
    end;

    operation invoicePaid();
    begin
        var invoice;
        begin
            invoice := Examples#client().startInvoice();
            invoice.client.newProject("Some project").addEntry(1).submit(invoice);
            invoice.issue();
            send InvoicePaid() to invoice;
        end;
        begin
            Assert#areEqual(Invoice::Status#Received, invoice.status);
        end;
    end;

    [Failure(constraint="InvoiceNotOpen", context="submit")]
    operation cannotSubmitEntryIfInvoiceNotOpen();
    begin
        var project, invoice;
        begin
            project := Examples#project();
            invoice := project.client.startInvoice();
            project.addEntry(1).submit(invoice);
            invoice.issue();
        end;
        begin
            project.addEntry(2).submit(invoice);
        end;
    end;

    [Failure(constraint="MustHaveEntry", context="issue")]
    operation cannotIssueInvoiceWithoutAnyEntry();
    begin
        Examples#client().startInvoice().issue();
    end;
end;

[Test]
class ClientScenarios

    operation withInvoicesSubmitted();
    begin
        var client1, client2, client3, existing;
        begin
            existing := Client#withInvoicesToIssue().size();
            client1 := Examples#client();
            client2 := Examples#client();
            client3 := Examples#client();
            /* one client with one invoice, the other one with two */
            client1.startInvoice();
            client2.startInvoice();
            client2.startInvoice();
        end;
        begin
            Assert#areEqual(existing + 2, Client#withInvoicesToIssue().size());
            client1.openInvoices.one().cancel();
        end;
        begin
            Assert#areEqual(existing + 1, Client#withInvoicesToIssue().size());
            client2.openInvoices.one().cancel();
        end;
        begin
            Assert#areEqual(existing + 1, Client#withInvoicesToIssue().size());
            client2.openInvoices.one().cancel();
        end;
        begin
            Assert#areEqual(existing, Client#withInvoicesToIssue().size());
        end;
    end;
end;

class Examples

    private static operation clientWithName(name : String) : Client;
    begin
        var client;
        client := new Client;
        client.name := name;
        return client;
    end;

    private static operation client() : Client;
    begin
        return Examples#clientWithName("New Client");
    end;

    private static operation projectWithName(description : String, client : Client) : Project;
    begin
        var project;
        project := new Project;
        project.description := description;
        project.client := client;
        return project;
    end;

    private static operation project() : Project;
    begin
        return Examples#projectWithName("New Project", Examples#client());
    end;
end;

end.