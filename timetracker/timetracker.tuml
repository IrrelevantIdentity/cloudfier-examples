package timetracker; 

import invoicer;

class Client

    attribute name : String;

    attribute tasks : Task[*];

    attribute invoices : Invoice[*];

    operation newTask(description : String) : Task;
    begin
        var newTask;
        newTask := new Task;
        newTask.description := description;
        link ClientTask(client := self, tasks := newTask);
        return newTask;
    end;

    operation startInvoice() : Invoice;
    begin
        var newInvoice;
        newInvoice := new Invoice;
        link ClientInvoice(client := self, invoices := newInvoice);
        return newInvoice;
    end;
    
    static query withInvoicesToIssue() : Client[*];
    begin
        return Client extent.select((client : Client) : Boolean {
        	client.invoices.exists((i : Invoice) : Boolean {
        	    i.status == Invoice::Status#Preparation
        	})
        });
    end;
    
    static query withInvoicesIssued() : Client[*];
    begin
        return Client extent.select((client : Client) : Boolean {
        	client.invoices.exists((i : Invoice) : Boolean {
        	    i.status == Invoice::Status#Invoiced
        	})
        });
    end;    
end;

class Task

    attribute description : String;

    attribute reported : Work[*];

    derived attribute toInvoice : Work[*] := {
        self.reported.select((w : Work) : Boolean { not w.invoiced })
    };

    readonly attribute client : Client;

    derived attribute unitsReported : Integer := {
        self.reported.sum((w : Work) : Integer { w.units })
    };

    derived attribute unitsToInvoice : Integer := {
        self.toInvoice.sum((w : Work) : Integer { w.units })
    };

    operation addWork(units : Integer) : Work;
    begin
        var newWork;
        newWork := new Work;
        newWork.units := units;
        link TaskWork(reported := newWork, task := self);
        return newWork;
    end; 
end;

class Invoice

    derived attribute number : String := {
        "" + self.issueDate.year() + "." + self.invoiceId
    };

    derived id attribute invoiceId : Integer;

    readonly attribute client : Client;

    attribute issueDate : Date := { Date#today() };

    attribute reported : Work[*];

    derived attribute open : Boolean := { self.status == Status#Preparation };

    attribute status : Status;

    required port invoicer : Invoicer;

    derived attribute totalUnits : Integer := {
        self.reported.sum((w : Work) : Integer { w.units })
    };

    operation issue()
        (* Cannot issue an invoice that has no work reported. *)
        precondition MustHaveWork { not self.reported.isEmpty() };
    begin
        self.issueDate := Date#today();
    end;

    private operation sendInvoice();
    begin
        send InvoiceIssued() to self.invoicer;
    end;

    statemachine Status

        initial state Preparation
            transition on call(issue) to Invoiced;
        end;

        state Invoiced
            entry {
                self.sendInvoice();
            };

            transition on signal(InvoicePaid) to Received;
        end;

        state Received end;

    end;

end;

signal InvoicePaid
end;

class Work

    attribute units : Integer := 1
        (* Work must describe a positive number of units. *)
        invariant MustBePositive { self.units > 0 };

    attribute task : Task;

    attribute date : Date := { Date#today() };

    attribute memo : Memo[0, 1];

    derived attribute client : Client := { self.task.client };

    (* Work can be only invoiced once. Cannot be set directly but via #submit *)
    readonly attribute invoice : Invoice[0, 1];

    derived attribute invoiced : Boolean := { not (self.invoice == null) };

    (* Submits this work to a chosen invoice for the client. *)
    operation submit(invoice : Invoice)
        precondition AlreadyInvoiced { not self.invoiced }
        precondition WrongClient(invoice) {
            invoice.client == self.task.client
        }
        precondition InvoiceNotOpen(invoice) { invoice.open };
    begin
        self.invoice := invoice;
    end;
end;

composition TaskWork

    role Task.reported;

    role Work.task;

end;

association InvoicedWork

    role Invoice.reported;

    role Work.invoice;

end;

association ClientTask

    role Client.tasks;

    role Task.client;

end;

association ClientInvoice

    role Client.invoices;

    role Invoice.client;

end;

end.
