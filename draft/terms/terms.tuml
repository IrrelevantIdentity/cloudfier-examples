package terms;

datatype MissingSuggestion
end;

class Term

    attribute name : String;

    composition definitions : Definition[*];

    (* Add the automatically suggested definition as one of the definitions for this term. *)
    operation acceptSuggestion()raises MissingSuggestion;
    begin
        var accepted : Definition, suggestion : Suggestion;
        begin
	        suggestion := self.definer.define(self.name);
	        if (suggestion == null)then
	            raise new MissingSuggestion;
	        accepted := new Definition;
	        if (not(suggestion.Definition.isEmpty())) then 
	            accepted.definition := suggestion.Definition
	        elseif (not(suggestion.Abstract.isEmpty())) then
	            accepted.definition := suggestion.Abstract
	        else
	            accepted.definition := suggestion.RelatedTopics.\any((t : Topic) : Boolean { not (t.Text == null) and (not(t.Text.isEmpty())) }).Text;
	        if (accepted.definition == null) then
	            raise new MissingSuggestion;            
            link TermDefinition(term := self, definitions := accepted);
        end;
    end;
    
    (* 
    Adds a new term an automatically assigns a suggested definition.
    If no suggestions exist, an error occurs.
    *)
    static operation newTerm(termName : String);
    begin
        var term : Term;
        begin
            term := new Term;
            term.name := termName;
        end;
        begin
            term.acceptSuggestion();
        end;
    end;

    required port definer : Definer;
end;

class Definition
    attribute definition : Memo;
end;

composition TermDefinition
    role Term.definitions;
    navigable role term : Term;
end;

interface Definer
    operation define(q : String) : Suggestion;
end;

datatype Topic
    attribute Text : Memo;
end;

datatype Suggestion
    attribute Definition : Memo;
    attribute Abstract : Memo;
    attribute RelatedTopics : Topic[*];
end;

external class DefinitionService implements Definer
end;

component TermsApp

    composition terms : Term[*];

    composition definitionService : DefinitionService;

    provided port definer : Definer connector terms.definer, definitionService;
end;

end.