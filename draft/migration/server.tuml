package migration;

signal MigrationStarted
end;

signal MigrationCompleted
end;

signal CutoverSuccess
end;

signal CutoverFailure
end;

(* A host is a machine, physical or virtual, on-premise or in the cloud *)
class Host

    attribute name : String;

    attribute address : String;

    derived attribute onCloud : Boolean := { self.kind == HostKind#Cloud };

    readonly attribute kind : HostKind;
end;

(* A server is the logical stuff we have running on a legacy server, 
   that we want to move to a server on the cloud. *)
class Server

    attribute sourceHost : Host
        (* The source host must be on-premise *)
        invariant { not self.sourceHost.onCloud };

    attribute targetHost : Host
        (* The destination host is supposed to be on the cloud. *)
        invariant { self.targetHost.onCloud };

    attribute status : Status;
    
    (* Starts migrating this server. *)
    operation start();
    
    (* Starts cutting this server over to the cloud *)
    operation cutover();

    statemachine Status

        initial state OnPremise
            transition on call(start) to Migrating;
        end;

        state Migrating
            transition on signal(MigrationCompleted) to Migrated;
        end;

        state Migrated
            transition on call(cutover) to CuttingOver;
        end;
        
        state CuttingOver
            transition on signal(CutoverSuccess) to InTheCloud;
            transition on signal(CutoverFailure) to OnPremise;
        end;

        state InTheCloud end;

    end;

end;

enumeration HostKind
    Physical, 
    Virtual, 
    Cloud
end;

