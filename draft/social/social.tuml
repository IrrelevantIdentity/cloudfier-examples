package social;


apply kirra;
import mdd_types;

role class User

    readonly id attribute username : String;
    
    attribute name : String;

    operation invite(invitee : User)
        precondition (invitee) { not(invitee == self) }
        precondition (invitee) {
            not invitee.pendingInvitationsReceived.includes(self)
        }
        precondition (invitee) {
            not self.pendingInvitationsReceived.includes(invitee)
        }
        precondition YouAlreadyInvitedThisPerson(invitee) {
            not invitee.invitationsRejected.includes(self)
        };
    begin
        link Invitation(inviter := self, invitee := invitee);
    end;
    
    operation uninvite(invitee : User)
        precondition (invitee) {
            invitee.pendingInvitationsReceived.includes(self)
        };
    begin
        unlink Invitation(inviter := self, invitee := invitee);
    end;

    operation accept(candidate : User)
        precondition (candidate) {
            self.pendingInvitationsReceived.includes(candidate)
        };
    begin
        unlink Invitation(inviter := candidate, invitee := self);
        link Connection(initiator := candidate, acceptor := self);
    end;

    operation reject(candidate : User)
        precondition (candidate) {
            self.pendingInvitationsReceived.includes(candidate)
        };
    begin
        unlink Invitation(inviter := candidate, invitee := self);
        link Rejection(rejected := candidate, rejector := self);
    end;

    derived attribute pendingInvitationsReceived : User[*] := {
        self<-Invitation->inviter
    };
    
    derived attribute pendingInvitationsSent : User[*] := {
        self<-Invitation->invitee
    };

    derived attribute invitationsRejected : User[*] := {
        self<-Rejection->rejected
    };

    derived attribute connections : User[*] := {
        self<-Connection->initiator.union(self<-Connection->acceptor)
    };
end;

association Invitation

    navigable role inviter : User[*];

    navigable role invitee : User[*];

end;

association Connection

    navigable role initiator : User[*];

    navigable role acceptor : User[*];

end;

association Rejection

    navigable role rejected : User[*];

    navigable role rejector : User[*];

end;

end.